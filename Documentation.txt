ReadFile.asm |
_____________|

openFileReadOnly
# description: opens an intended file
# input:
# - $a0: address of null-terminated string of filepath (relative to MARS location)
# output:
# - $v0: file descriptor, or -1 if error

getRandWord
# description: get a random word from a given file
# input:
# - $a0: file descriptor
# - $a1: amount of words in the file
# ouput:
# - $v0: address of a 5-word character (null-terminated)

closeFile
# description: close a file descriptor
# input:
# - $a0: file descriptor
# ouput:
# - None

--------------------------------------------------------------------------------------------------------------------
CheckWord.asm |
______________|

checkWord
# description: check for correct position, wrong position, and not in word
# input:
# - $a0: address of null-terminated string length 5 for input word
# - $a1: address of null-terminated string length 5 for correct word
# ouput:
# - $v0: address of result indicator
# Note: result indicator is a string length 5 with these characters:
# - ^ means right position
# - * means wrong position
# - X means not in word

--------------------------------------------------------------------------------------------------------------------
IO_Bitmap.asm |
______________|

# Note: must do this before any subroutine can be used:
# datas for bitmap display
# Note:
# Tools -> Bitmap Display
#
# In Bitmap Display extension, set:
# - Unit Width/Height in Pixels to 8.
# - Display Width in Pixels to 512, Display Height in Pixels to 512
# - Base address for display to 0x10040000 (heap).
# And then press "Reset" then press "Connect to MIPS" before doing anything
# Note: Please run function allocateBitmapHeapMemory first thing before using any additional heap memory
# since bitmap display extension is set to such that its memory for DMA is the first address in the heap.

allocateBitmapBuffer
# description: allocate space for 1024x512 bitmap canvas with each unit square is 16 pixel x 16 pixel
# input:
# - None
# output:
# - $v0: address of first byte of heap memory allocated
# Note: Please run function allocateBitmapHeapMemory first thing before using any additional heap memory
# since bitmap display extension is set to such that its memory for DMA is.

resetCanvas
# description: reset the whole bitmap into all blank squares (last line is green due to it being answer line)
# Input:
# - $a0: starting address of bitmap
# Output:
# - None

blacken:
# description: change the whole canvas to black
# Input:
# - $a0: starting location
# Output:
# - None

drawChar
# description: draw a character onto the canvas with the given inputs
# input:
# - $a0: ascii code of char (must be between A (65 or 0x41) and Z (90 or 0x5a) + 91 for blank)
# - $a1: starting address of bitmap buffer
# - $a2: square number (between 0 and 34)
# - $a3: color code (right, wrong, none, pre)
# output:
# - None

drawWord
# description: draw a word onto the canvas (MSB line 0 -> LSB line 3)
# Input:	
# - $a0: starting address
# - $a1: word to draw
# - $a2: background color
# Output:
# - $v0: word to draw sll 16

drawRow
# description: draw the MSB of the word onto the designated line
# Input:	
# - $a0: starting address
# - $a1: word to draw
# - $a2: background color
# Output:
# - $v0: word to draw sll 8

printWordWithCheck
# description: print a line with the user input and the checker string in the bitmap tool
# Input:
# - $a0: word string
# - $a1: bitmap buffer
# - $a2: line number, line goes from 0 - 5
# - $a3: checker string
# Output:
# - None

color labels
# right: for correct position, green
# wrong: for wrong position, yellow
# none:  for not in word, grey
# pre:   before checking, white

--------------------------------------------------------------------------------------------------------------------
InputProcessing.asm |
____________________|


isUppercase
# description: checks if given ascii code is upercase
# input:
# - $a0: char
# output:
# - $v0: is uppercase ? 1 : 0

isLowercase
# description: checks if given ascii code is lowercase
# input:
# - $a0: char
# output:
# - $v0: is lowercase ? 1 : 0

makeUppercase
# description: if char is alphabet, return its uppercase counterpart, else return -1
# input:
# - $a0: ascii code
# output:
# - $v0: ($a0 is alphabet) ? (make $a0 uppercase) : -1

--------------------------------------------------------------------------------------------------------------------
Sound.asm |
__________|

rightSound:
# description: plays the sound for when the user guesses correctly
# input:
# - None
# ouput:
# - None

wrongSound:
# description: plays the sound for when the user guesses incorrectly
# input:
# - None
# ouput:
# - None